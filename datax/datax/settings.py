"""
Django settings for datax project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

BROKER_URL = 'django://localhost:80//'

CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERYBEAT_SCHEDULE={
    'do_some_fixedtime_task':{
        'task':'connect.tasks.fixedtime_task',
        'schedule':crontab(hour=0,minute=0) #每次运行后需要清空celery相关的表，这里的配置信息已经写入数据库，这里修改不起作用
        # 'schedule':timedelta(seconds=5)
    },'backupDB_everyday':{
        'task':'common.autoBackupDatabase.backupDatabase',
        'schedule':crontab(hour=1,minute=0) #每天凌晨1点备份当天的数据库数据，删除前天的数据,保留数据为
        # 'schedule':timedelta(seconds=5)
    }
}

CELERY_TIMEZONE='Asia/Shanghai'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7zxm*3mz@ng-+@xghafhb62*yshasn8uu8c%^oh)l@p*n+)*dt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

APPEND_SLASH=False
# AUTH_PROFILE_MODULE = 'account.sys_userextension'
AUTH_USER_MODEL = 'account.sys_userextension'
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'connect',
    'account',
    'dashboard',
    'rest_framework',
    'rest_framework_swagger',
    'django_filters',
    'djcelery',
    'kombu.transport.django',
    'bi',
    'channels',
]
ASGI_APPLICATION = 'chatbot_website.routing.application'
CHANNEL_LAYERS = {
   "default": {
       "BACKEND": "asgiref.inmemory.ChannelLayer",
       "ROUTING": "datax.routing.channel_routing",
   },
}



REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'datax.limits.SimpleMiddleware',
    'datax.middleware.UrlMiddleware'
]

ROOT_URLCONF = 'datax.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'frontend').replace('\\', '/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'datax.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
# sample:
# 'NAME': 'datax',
# 'USER': 'postgres',
# 'PASSWORD': 'sasa',
# 'HOST': '127.0.0.1',
# 'PORT': '5432',

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'datax_cost',
#         'USER': 'postgres',
#         'PASSWORD': '1qaz@WSX',
#         'HOST': '127.0.0.1',
#         'PORT': '5432',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'datax_cost',
        'USER': 'postgres',
        'PASSWORD': '123!@#',
        'HOST': '47.100.198.97',
        'PORT': '54321',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

X_FRAME_OPTIONS = 'ALLOWALL'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

LOGIN_URL = '/account/login'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/frontend/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "frontend"),
]
#STATIC_ROOT = os.path.join(BASE_DIR, 'frontend')

MEDIA_URL = '/upload/'

MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_URL, 'picture')


#日志文件配置项
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
       'standard': {#日志格式
            'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'
       }
    },
    'filters': {
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'default': {
            'level':'DEBUG',
            'class':'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/all.log"),     #日志输出文件
            'maxBytes': 1024*1024*5,                  #文件大小
            'backupCount': 5,                         #备份份数
            'formatter':'standard',                   #使用哪种formatters日志格式
        },
        'infoLogs': {#只打印info的日志
            'level':'INFO',
            'class':'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/datax.log"),
            'maxBytes':1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        },
        'error': {
            'level':'ERROR',
            'class':'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/error.log"),
            'maxBytes':1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        },
        'console':{
            'level': 'ERROR',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        'request_handler': {
            'level':'DEBUG',
            'class':'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/script.log"),
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        },
        'scprits_handler': {
            'level':'DEBUG',
            'class':'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs/script.log"),
            'maxBytes': 1024*1024*5,
            'backupCount': 5,
            'formatter':'standard',
        }
    },
    'loggers': {
        'django': {#logger名字，在调用getLogger()时需要传入
            'handlers': ['default', 'console'],#对应handler的配置
            'level': 'DEBUG',#日志级别
            'propagate': False#
        },
        'djangoInfo': {#打印自定义的日志
            'handlers': ['infoLogs'],
            'level': 'INFO',
            'propagate': False
        },
        'django.request': {#如果请求的方法里跑出异常则系统自动记录到script.log文件里
            'handlers': ['request_handler'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'scripts': {
            'handlers': ['scprits_handler'],
            'level': 'INFO',
            'propagate': False
        },
        'sourceDns.webdns.views': {
            'handlers': ['default', 'error'],
            'level': 'DEBUG',
            'propagate': True
        },
        'sourceDns.webdns.util':{
            'handlers': ['error'],
            'level': 'ERROR',
            'propagate': True
        }
    }
}